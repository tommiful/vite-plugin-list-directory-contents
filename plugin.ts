import { ViteDevServer } from "vite";
import * as path from 'path';
import { readdir } from 'fs/promises'
import { Dirent } from 'fs';

type ViteContext = {
  path: string
  filename: string
  originalUrl?: string
  server?: ViteDevServer
  bundle?: import('rollup').OutputBundle
  chunk?: import('rollup').OutputChunk
}

function makeListFromDirectory(directoryListing: Dirent[], base: string, filters: string[]) {
  // 3. Generate a listing of links
  const links = directoryListing
    // .sort((a, b) => a.isDirectory() ? 1 : -1)
    .reduce((acc, file: Dirent) => {
      if(file.isDirectory()) {
        acc[0].push(file)
      } else {
        acc[1].push(file)
      }
      return acc;
    }, [[], []] as [Dirent[], Dirent[]])
    .flat()
    .filter(dirent => !filters.includes(dirent.name))
    .map(file => `<li>
        <a href="${base === '/' ? '' : base}/${file.name}">
           ${file.isDirectory() ? 'üóÇ' : ''}
           ${file.name.endsWith('.html') ? 'üñ•' : ''}
          ${file.name}
        </a>
        </li>`).join('');

    return links;
}

type PluginArgs = {
  baseDir: string
  filterList?: string[]
}

export function htmlPlugin({ baseDir, filterList }: PluginArgs) {
  if(!filterList) {
    filterList = ['.DS_Store', 'package.json', 'package-lock.json', 'node_modules', '.parcelrc', '.parcel-cache', 'dist', 'packages'];
  }
  return {
    name: 'index-of-directory-listing',
    async transformIndexHtml(html: string, ctx: ViteContext) {
      // vite falls back to index.html if no other file matches
      if (!ctx.filename.endsWith('index.html')) return html;

      const currentFolder = path.join(baseDir, ctx.originalUrl.replace('/index.html', ''));

      // 2.  Get a listing of files in the directory
      const directoryListing: Dirent[] = await readdir(currentFolder, { withFileTypes: true });
      const listItems = makeListFromDirectory(directoryListing, ctx.originalUrl, filterList);

      return html.replace(
        '{%DIRECTORY%}',
        /*html*/`<h2>Index Of ${ctx.originalUrl}</h2>
        <ul>
          ${ctx.originalUrl === '/' ? '' : '<li><a href="..">‚¨ÜÔ∏è Up a level</a></li>'}
          ${listItems.length ? listItems : 'üëª It\'s very quiet in here. Make a file or two and get coding!'}
        </ul>
        <style>${css}</style>
        <!-- ü•∞ Generated by a Vite Plugin, Made by Wes Bos for Tasty TypeScript-->
        `
      )
    }
  }
}

const css = /*css*/`
  html {
    --blue: #193549;
    --yellow: #ffc600;
    --subtle: rgba(255, 255, 255, 0.1);
    margin: 0;
  }
  h2 {
    text-align: center;
  }
  body {
    font-family: 'Operator Mono', 'Dank Mono', 'Fira Code', 'monospace';
    font-weight: 200;
    background: var(--blue);
    color: white;
    font-size: 1.3rem;
  }
  a {
    color: var(--yellow);
    display: block;
    padding: 10px 20px;
    text-decoration: none;
  }
  a:hover {
    background: var(--subtle);
  }
  li {
    border-bottom: 1px solid var(--subtle);
  }
  li:last-child {
    border-bottom: none;
  }
  ul {
    margin: 0;
    margin: 0 auto;
    max-width: 800px;
    border: 1px solid var(--subtle);
    padding: 0;
    border-radius: 10px;
    list-style:none;
  }
`;
